version 1.0.12   released on 12 Mar 2017, origin: https://download.libsodium.org/libsodium/releases/libsodium-1.0.12.tar.gz

Steps to get the headers on linux:
$ ./configure
take those from libsodium-<version>/src/libsodium/include

(when comparatively installing an Ubuntu/debian libsodium-dev package, the directory sodium/private/ and file sodium/randombytes_nativeclient.h
don't exist !
Therefore:
sodium/private/ is considered to be no part of the (public) API and got excluded in the D-binding.
sodium/randombytes_nativeclient.h has to be dealt with specifically.
)

Translating to D will:
render the (pure preprocessor directives) file sodium/export.h to be empty, thus excluded.
sodium.h will be package.d within directory sodium


excerpt of changelog:


* Version 1.0.12
 - Ed25519ph was implemented, adding a multi-part signature API
(`crypto_sign_init()`, `crypto_sign_update()`, `crypto_sign_final_*()`).
 - New constants and related accessors have been added for Scrypt and
Argon2.
 - XChaCha20 has been implemented. Like XSalsa20, this construction
extends the ChaCha20 cipher to accept a 192-bit nonce. This makes it safe
to use ChaCha20 with random nonces.
 - `crypto_secretbox`, `crypto_box` and `crypto_aead` now offer
variants leveraging XChaCha20.
 - SHA-2 is about 20% faster, which also gives a speed boost to
signature and signature verification.
 - AVX2 implementations of Salsa20 and ChaCha20 have been added. They
are twice as fast as the SSE2 implementations. The speed gain is
even more significant on Windows, that previously didn't use
vectorized implementations.
 - New high-level API: `crypto_kdf`, to easily derive one or more
subkeys from a master key.
 - Siphash with a 128-bit output has been implemented, and is
available as `crypto_shorthash_siphashx_*`.
 - New `*_keygen()` helpers functions have been added to create secret
keys for all constructions. This improves code clarity and can prevent keys
from being partially initialized.
 - A new `randombytes_buf_deterministic()` function was added to
deterministically fill a memory region with pseudorandom data. This
function can especially be useful to write reproducible tests.
 - A preliminary `crypto_kx_*()` API was added to compute shared session
keys.
 - AVX2 detection is more reliable.
 - The pthreads library is not required any more when using MingW.
 - `contrib/Findsodium.cmake` was added as an example to include
libsodium in a project using cmake.
 - Compatibility with gcc 2.x has been restored.
 - Minimal builds can be checked using `sodium_library_minimal()`.
 - The `--enable-opt` compilation switch has become compatible with more
platforms.
 - Android builds are now using clang on platforms where it is
available.

* Version 1.0.11
 - sodium_init() is now thread-safe, and can be safely called multiple
times.
 - Android binaries now properly support 64-bit Android, targeting
platform 24, but without breaking compatibility with platforms 16 and
21.
 - Better support for old gcc versions.
 - On FreeBSD, core dumps are disabled on regions allocated with
sodium allocation functions.
 - AVX2 detection was fixed, resulting in faster Blake2b hashing on
platforms where it was not properly detected.
 - The Sandy2x Curve25519 implementation was not as fast as expected
on some platforms. This has been fixed.
 - The NativeClient target was improved. Most notably, it now supports
optimized implementations, and uses pepper_49 by default.
 - The library can be compiled with recent Emscripten versions.
Changes have been made to produce smaller code, and the default heap
size was reduced in the standard version.
 - The code can now be compiled on SLES11 service pack 4.
 - Decryption functions can now accept a NULL pointer for the output.
This checks the MAC without writing the decrypted message.
 - crypto_generichash_final() now returns -1 if called twice.
 - Support for Visual Studio 2008 was improved.

* Version 1.0.10
 - This release only fixes a compilation issue reported with some older
gcc versions. There are no functional changes over the previous release.

* Version 1.0.9
 - The Javascript target now includes a `--sumo` option to include all the symbols of the original C library.
 - A detached API was added to the ChaCha20-Poly1305 and AES256-GCM implementations.
 - The Argon2i password hashing function was added, and is accessible
directly and through a new, high-level `crypto_pwhash` API. The scrypt
function remains available as well.
 - A speed-record AVX2 implementation of BLAKE2b was added (thanks to Samuel Neves).
 - The library can now be compiled using C++Builder (thanks to @jcolli44)
 - Countermeasures for Ed25519 signatures malleability have been added
to match the irtf-cfrg-eddsa draft (note that malleability is irrelevant to
the standard definition of signature security). Signatures with a small-order
`R` point are now also rejected.
 - Some implementations are now slightly faster when using the Clang compiler.
 - The HChaCha20 core function was implemented (`crypto_core_hchacha20()`).
 - No-op stubs were added for all AES256-GCM public functions even when compiled on non-Intel platforms.
 - `crypt_generichash_blake2b_statebytes()` was added.
 - New macros were added for the IETF variant of the ChaCha20-Poly1305 construction.
 - The library can now be compiled on Minix.
 - HEASLR is now enabled on MinGW builds.

* Version 1.0.8
 - Handle the case where the CPU supports AVX, but we are running on an hypervisor with AVX disabled/not supported.
 - Faster (2x) scalarmult_base() when using the ref10 implementation.
