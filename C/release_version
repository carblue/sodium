version 1.0.11   released on 31 Jul 2016, https://download.libsodium.org/libsodium/releases/libsodium-1.0.11.tar.gz

excerpt of changelog:


* Version 1.0.11
 - sodium_init() is now thread-safe, and can be safely called multiple
times.
 - Android binaries now properly support 64-bit Android, targeting
platform 24, but without breaking compatibility with platforms 16 and
21.
 - Better support for old gcc versions.
 - On FreeBSD, core dumps are disabled on regions allocated with
sodium allocation functions.
 - AVX2 detection was fixed, resulting in faster Blake2b hashing on
platforms where it was not properly detected.
 - The Sandy2x Curve25519 implementation was not as fast as expected
on some platforms. This has been fixed.
 - The NativeClient target was improved. Most notably, it now supports
optimized implementations, and uses pepper_49 by default.
 - The library can be compiled with recent Emscripten versions.
Changes have been made to produce smaller code, and the default heap
size was reduced in the standard version.
 - The code can now be compiled on SLES11 service pack 4.
 - Decryption functions can now accept a NULL pointer for the output.
This checks the MAC without writing the decrypted message.
 - crypto_generichash_final() now returns -1 if called twice.
 - Support for Visual Studio 2008 was improved.

* Version 1.0.10
 - This release only fixes a compilation issue reported with some older
gcc versions. There are no functional changes over the previous release.

* Version 1.0.9
 - The Javascript target now includes a `--sumo` option to include all the symbols of the original C library.
 - A detached API was added to the ChaCha20-Poly1305 and AES256-GCM implementations.
 - The Argon2i password hashing function was added, and is accessible
directly and through a new, high-level `crypto_pwhash` API. The scrypt
function remains available as well.
 - A speed-record AVX2 implementation of BLAKE2b was added (thanks to Samuel Neves).
 - The library can now be compiled using C++Builder (thanks to @jcolli44)
 - Countermeasures for Ed25519 signatures malleability have been added
to match the irtf-cfrg-eddsa draft (note that malleability is irrelevant to
the standard definition of signature security). Signatures with a small-order
`R` point are now also rejected.
 - Some implementations are now slightly faster when using the Clang compiler.
 - The HChaCha20 core function was implemented (`crypto_core_hchacha20()`).
 - No-op stubs were added for all AES256-GCM public functions even when compiled on non-Intel platforms.
 - `crypt_generichash_blake2b_statebytes()` was added.
 - New macros were added for the IETF variant of the ChaCha20-Poly1305 construction.
 - The library can now be compiled on Minix.
 - HEASLR is now enabled on MinGW builds.

* Version 1.0.8
 - Handle the case where the CPU supports AVX, but we are running on an hypervisor with AVX disabled/not supported.
 - Faster (2x) scalarmult_base() when using the ref10 implementation.
